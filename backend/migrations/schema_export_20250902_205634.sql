-- Database schema export generated by SQLAlchemy
-- Generated at: 2025-09-02T20:56:34.939530
-- This file contains only the database structure (no data)

-- Drop existing tables
DROP TABLE IF EXISTS tutor_earnings CASCADE;
DROP TABLE IF EXISTS student_session_feedback CASCADE;
DROP TABLE IF EXISTS session_students CASCADE;
DROP TABLE IF EXISTS credit_transactions CASCADE;
DROP TABLE IF EXISTS sessions CASCADE;
DROP TABLE IF EXISTS quiz_results CASCADE;
DROP TABLE IF EXISTS questions CASCADE;
DROP TABLE IF EXISTS message_read_status CASCADE;
DROP TABLE IF EXISTS quizzes CASCADE;
DROP TABLE IF EXISTS payment_methods CASCADE;
DROP TABLE IF EXISTS lessons CASCADE;
DROP TABLE IF EXISTS chat_participants CASCADE;
DROP TABLE IF EXISTS chat_messages CASCADE;
DROP TABLE IF EXISTS user_password_vault CASCADE;
DROP TABLE IF EXISTS system_settings CASCADE;
DROP TABLE IF EXISTS system_config CASCADE;
DROP TABLE IF EXISTS student_credit_allocations CASCADE;
DROP TABLE IF EXISTS stripe_customers CASCADE;
DROP TABLE IF EXISTS password_view_audit CASCADE;
DROP TABLE IF EXISTS password_reset_tokens CASCADE;
DROP TABLE IF EXISTS notifications CASCADE;
DROP TABLE IF EXISTS modules CASCADE;
DROP TABLE IF EXISTS guardian_invitations CASCADE;
DROP TABLE IF EXISTS enrollments CASCADE;
DROP TABLE IF EXISTS credit_balances CASCADE;
DROP TABLE IF EXISTS course_tutors CASCADE;
DROP TABLE IF EXISTS course_chats CASCADE;
DROP TABLE IF EXISTS availability CASCADE;
DROP TABLE IF EXISTS ai_prompts CASCADE;
DROP TABLE IF EXISTS admin_security_config CASCADE;
DROP TABLE IF EXISTS admin_secure_sessions CASCADE;
DROP TABLE IF EXISTS admin_actions CASCADE;
DROP TABLE IF EXISTS users CASCADE;
DROP TABLE IF EXISTS pricing_plans CASCADE;
DROP TABLE IF EXISTS payments CASCADE;
DROP TABLE IF EXISTS invoices CASCADE;
DROP TABLE IF EXISTS courses CASCADE;

-- Table: courses
CREATE TABLE courses (
    id VARCHAR(50) PRIMARY KEY,
    title VARCHAR(200) NOT NULL,
    description TEXT,
    price FLOAT DEFAULT 0.0,
    currency VARCHAR(3) DEFAULT GBP,
    duration VARCHAR(50),
    level VARCHAR(50),
    subject VARCHAR(100),
    country VARCHAR(100),
    grade_level VARCHAR(50),
    status VARCHAR(20) DEFAULT active,
    timezone VARCHAR(50) DEFAULT UTC,
    thumbnail VARCHAR(500),
    syllabus JSONB DEFAULT [],
    prerequisites JSONB DEFAULT [],
    learning_outcomes JSONB DEFAULT [],
    created_at TIMESTAMP,
    updated_at TIMESTAMP
);

-- Table: invoices
CREATE TABLE invoices (
    id VARCHAR(50) PRIMARY KEY,
    invoice_number VARCHAR(50) NOT NULL,
    guardian_id VARCHAR(50) NOT NULL,
    student_id VARCHAR(50),
    course_id VARCHAR(50),
    payment_id VARCHAR(50),
    amount FLOAT NOT NULL,
    subtotal FLOAT NOT NULL DEFAULT 0.0,
    tax_amount FLOAT DEFAULT 0.0,
    tax_rate FLOAT DEFAULT 0.0,
    currency VARCHAR(3) DEFAULT GBP,
    status VARCHAR(20) DEFAULT pending,
    payment_method VARCHAR(50),
    payment_date TIMESTAMP,
    due_date TIMESTAMP,
    items JSONB DEFAULT [],
    line_items JSONB DEFAULT [],
    pdf_path VARCHAR(255),
    notes TEXT,
    created_at TIMESTAMP,
    updated_at TIMESTAMP
);

-- Table: payments
CREATE TABLE payments (
    id VARCHAR(50) PRIMARY KEY,
    invoice_id VARCHAR(50),
    guardian_id VARCHAR(50),
    amount FLOAT NOT NULL,
    currency VARCHAR(3) DEFAULT GBP,
    method VARCHAR(50) NOT NULL,
    status VARCHAR(20) DEFAULT pending,
    transaction_id VARCHAR(100),
    gateway_response JSONB DEFAULT {},
    credits_earned FLOAT DEFAULT 0.0,
    processed_at TIMESTAMP
);

-- Table: pricing_plans
CREATE TABLE pricing_plans (
    id VARCHAR(50) PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    price FLOAT NOT NULL,
    currency VARCHAR(3) DEFAULT GBP,
    period VARCHAR(50) NOT NULL,
    credit_rate FLOAT NOT NULL DEFAULT 1.0,
    features JSONB DEFAULT [],
    is_popular BOOLEAN DEFAULT False,
    is_active BOOLEAN DEFAULT True,
    display_order INTEGER DEFAULT 0,
    created_at TIMESTAMP,
    updated_at TIMESTAMP
);

-- Table: users
CREATE TABLE users (
    id VARCHAR(50) PRIMARY KEY,
    email VARCHAR(120) NOT NULL,
    password_hash VARCHAR(128) NOT NULL,
    account_type VARCHAR(20) NOT NULL,
    is_active BOOLEAN DEFAULT True,
    status VARCHAR(30) DEFAULT pending,
    last_login TIMESTAMP,
    created_at TIMESTAMP,
    updated_at TIMESTAMP,
    profile JSONB DEFAULT {},
    temp_password_hash VARCHAR(255),
    temp_password_expires_at TIMESTAMP,
    force_password_change BOOLEAN DEFAULT False,
    temp_password_created_by VARCHAR(50),
    reset_token VARCHAR(64),
    reset_token_expires TIMESTAMP
);

-- Table: admin_actions
CREATE TABLE admin_actions (
    id VARCHAR(50) PRIMARY KEY,
    admin_id VARCHAR(50) NOT NULL,
    action_type VARCHAR(50) NOT NULL,
    target_user_id VARCHAR(50) NOT NULL,
    details JSONB DEFAULT {},
    ip_address VARCHAR(45),
    user_agent TEXT,
    created_at TIMESTAMP
);

-- Table: admin_secure_sessions
CREATE TABLE admin_secure_sessions (
    id VARCHAR(50) PRIMARY KEY,
    admin_id VARCHAR(50) NOT NULL,
    session_token VARCHAR(255) NOT NULL,
    operations_allowed JSONB DEFAULT ['view_passwords'],
    created_at TIMESTAMP,
    expires_at TIMESTAMP NOT NULL,
    last_activity_at TIMESTAMP,
    ip_address VARCHAR(45),
    user_agent TEXT,
    mfa_verified BOOLEAN DEFAULT False,
    is_revoked BOOLEAN DEFAULT False
);

-- Table: admin_security_config
CREATE TABLE admin_security_config (
    id VARCHAR(50) PRIMARY KEY,
    config_key VARCHAR(100) NOT NULL,
    config_value JSONB NOT NULL,
    created_by VARCHAR(50),
    updated_by VARCHAR(50),
    created_at TIMESTAMP,
    updated_at TIMESTAMP
);

-- Table: ai_prompts
CREATE TABLE ai_prompts (
    id VARCHAR(50) PRIMARY KEY,
    prompt_name VARCHAR(100) NOT NULL,
    prompt_content TEXT NOT NULL,
    created_by VARCHAR(50),
    updated_by VARCHAR(50),
    created_at TIMESTAMP,
    updated_at TIMESTAMP
);

-- Table: availability
CREATE TABLE availability (
    id VARCHAR(50) PRIMARY KEY,
    tutor_id VARCHAR(50) NOT NULL,
    day_of_week INTEGER NOT NULL,
    start_time VARCHAR(5) NOT NULL,
    end_time VARCHAR(5) NOT NULL,
    available BOOLEAN DEFAULT True,
    time_zone VARCHAR(50) DEFAULT UTC,
    course_id VARCHAR(50),
    is_recurring BOOLEAN DEFAULT False,
    recurrence_type VARCHAR(20) DEFAULT weekly,
    recurrence_days JSONB,
    recurrence_end_date TIMESTAMP,
    parent_availability_id VARCHAR(50),
    exception_dates JSONB,
    specific_date DATE,
    created_at TIMESTAMP,
    updated_at TIMESTAMP
);

-- Table: course_chats
CREATE TABLE course_chats (
    id VARCHAR(50) PRIMARY KEY,
    course_id VARCHAR(50) NOT NULL,
    name VARCHAR(200) NOT NULL,
    created_by VARCHAR(50) NOT NULL,
    created_at TIMESTAMP,
    updated_at TIMESTAMP,
    last_message_at TIMESTAMP,
    is_active BOOLEAN DEFAULT True,
    participants_count INTEGER DEFAULT 0
);

-- Table: course_tutors
CREATE TABLE course_tutors (
    course_id VARCHAR(50) PRIMARY KEY,
    tutor_id VARCHAR(50) PRIMARY KEY
);

-- Table: credit_balances
CREATE TABLE credit_balances (
    id VARCHAR(50) PRIMARY KEY,
    guardian_id VARCHAR(50) NOT NULL,
    total_credits FLOAT DEFAULT 0.0,
    used_credits FLOAT DEFAULT 0.0,
    available_credits FLOAT DEFAULT 0.0,
    last_updated TIMESTAMP
);

-- Table: enrollments
CREATE TABLE enrollments (
    id VARCHAR(50) PRIMARY KEY,
    student_id VARCHAR(50) NOT NULL,
    course_id VARCHAR(50) NOT NULL,
    guardian_id VARCHAR(50),
    status VARCHAR(20) DEFAULT pending,
    enrolled_date TIMESTAMP,
    approved_date TIMESTAMP,
    progress INTEGER DEFAULT 0,
    credits_used INTEGER DEFAULT 0,
    completed_modules JSONB DEFAULT [],
    current_module VARCHAR(50)
);

-- Table: guardian_invitations
CREATE TABLE guardian_invitations (
    id VARCHAR(50) PRIMARY KEY,
    student_id VARCHAR(50) NOT NULL,
    guardian_email VARCHAR(120) NOT NULL,
    invitation_token VARCHAR(100) NOT NULL,
    status VARCHAR(20) DEFAULT pending,
    invited_at TIMESTAMP,
    expires_at TIMESTAMP NOT NULL,
    accepted_at TIMESTAMP,
    guardian_id VARCHAR(50)
);

-- Table: modules
CREATE TABLE modules (
    id VARCHAR(50) PRIMARY KEY,
    course_id VARCHAR(50) NOT NULL,
    title VARCHAR(200) NOT NULL,
    description TEXT,
    order INTEGER DEFAULT 0,
    duration VARCHAR(50),
    status VARCHAR(20) DEFAULT active,
    start_date TIMESTAMP,
    end_date TIMESTAMP,
    created_at TIMESTAMP,
    updated_at TIMESTAMP
);

-- Table: notifications
CREATE TABLE notifications (
    id VARCHAR(50) PRIMARY KEY,
    user_id VARCHAR(50) NOT NULL,
    type VARCHAR(50) NOT NULL,
    title VARCHAR(200),
    message TEXT NOT NULL,
    data JSONB DEFAULT {},
    read BOOLEAN DEFAULT False,
    created_at TIMESTAMP
);

-- Table: password_reset_tokens
CREATE TABLE password_reset_tokens (
    id VARCHAR(50) PRIMARY KEY,
    user_id VARCHAR(50) NOT NULL,
    token_hash VARCHAR(255) NOT NULL,
    initiated_by_admin VARCHAR(50) NOT NULL,
    expires_at TIMESTAMP NOT NULL,
    used_at TIMESTAMP,
    ip_address VARCHAR(45),
    created_at TIMESTAMP
);

-- Table: password_view_audit
CREATE TABLE password_view_audit (
    id VARCHAR(50) PRIMARY KEY,
    admin_id VARCHAR(50) NOT NULL,
    target_user_id VARCHAR(50) NOT NULL,
    view_type VARCHAR(20) NOT NULL,
    ip_address VARCHAR(45),
    user_agent TEXT,
    session_token VARCHAR(255),
    justification TEXT,
    viewed_at TIMESTAMP,
    mfa_verified BOOLEAN DEFAULT False,
    admin_re_authenticated BOOLEAN DEFAULT False,
    browser_fingerprint VARCHAR(255)
);

-- Table: stripe_customers
CREATE TABLE stripe_customers (
    id VARCHAR(50) PRIMARY KEY,
    user_id VARCHAR(50) NOT NULL,
    stripe_customer_id VARCHAR(100) NOT NULL,
    email VARCHAR(255),
    created_at TIMESTAMP,
    updated_at TIMESTAMP
);

-- Table: student_credit_allocations
CREATE TABLE student_credit_allocations (
    id VARCHAR(50) PRIMARY KEY,
    guardian_id VARCHAR(50) NOT NULL,
    student_id VARCHAR(50) NOT NULL,
    allocated_credits FLOAT DEFAULT 0.0,
    used_credits FLOAT DEFAULT 0.0,
    remaining_credits FLOAT DEFAULT 0.0,
    allocation_reason VARCHAR(200) DEFAULT General allocation,
    last_updated TIMESTAMP,
    created_at TIMESTAMP
);

-- Table: system_config
CREATE TABLE system_config (
    id VARCHAR(50) PRIMARY KEY,
    config_key VARCHAR(100) NOT NULL,
    config_value TEXT NOT NULL,
    updated_by VARCHAR(50),
    updated_at TIMESTAMP
);

-- Table: system_settings
CREATE TABLE system_settings (
    id VARCHAR(50) PRIMARY KEY,
    setting_key VARCHAR(100) NOT NULL,
    setting_value TEXT NOT NULL,
    setting_type VARCHAR(20) DEFAULT string,
    description TEXT,
    created_at TIMESTAMP,
    updated_at TIMESTAMP,
    updated_by VARCHAR(50)
);

-- Table: user_password_vault
CREATE TABLE user_password_vault (
    id VARCHAR(50) PRIMARY KEY,
    user_id VARCHAR(50) NOT NULL,
    password_plaintext_encrypted TEXT,
    password_hash VARCHAR(255) NOT NULL,
    encryption_key_id VARCHAR(50) NOT NULL,
    created_at TIMESTAMP,
    is_current BOOLEAN DEFAULT True,
    store_plaintext BOOLEAN DEFAULT False
);

-- Table: chat_messages
CREATE TABLE chat_messages (
    id VARCHAR(50) PRIMARY KEY,
    chat_id VARCHAR(50) NOT NULL,
    sender_id VARCHAR(50) NOT NULL,
    message_text TEXT NOT NULL,
    message_type VARCHAR(20) DEFAULT text,
    created_at TIMESTAMP,
    edited_at TIMESTAMP,
    is_deleted BOOLEAN DEFAULT False,
    reply_to_message_id VARCHAR(50),
    file_name VARCHAR(255),
    file_path VARCHAR(500),
    file_size INTEGER,
    file_type VARCHAR(100)
);

-- Table: chat_participants
CREATE TABLE chat_participants (
    id VARCHAR(50) PRIMARY KEY,
    chat_id VARCHAR(50) NOT NULL,
    user_id VARCHAR(50) NOT NULL,
    role VARCHAR(20) NOT NULL,
    joined_at TIMESTAMP,
    last_read_at TIMESTAMP,
    is_active BOOLEAN DEFAULT True,
    can_send_messages BOOLEAN DEFAULT True
);

-- Table: lessons
CREATE TABLE lessons (
    id VARCHAR(50) PRIMARY KEY,
    module_id VARCHAR(50) NOT NULL,
    title VARCHAR(200) NOT NULL,
    description TEXT,
    order INTEGER DEFAULT 0,
    duration INTEGER,
    type VARCHAR(50),
    content JSONB DEFAULT {},
    status VARCHAR(20) DEFAULT active,
    created_at TIMESTAMP
);

-- Table: payment_methods
CREATE TABLE payment_methods (
    id VARCHAR(50) PRIMARY KEY,
    user_id VARCHAR(50) NOT NULL,
    stripe_customer_id VARCHAR(50),
    stripe_payment_method_id VARCHAR(100),
    type VARCHAR(20) NOT NULL,
    nickname VARCHAR(100),
    is_default BOOLEAN DEFAULT False,
    card_type VARCHAR(20),
    last4 VARCHAR(4),
    exp_month INTEGER,
    exp_year INTEGER,
    bank_name VARCHAR(100),
    account_type VARCHAR(20),
    paypal_email VARCHAR(255),
    paypal_account_id VARCHAR(100),
    is_active BOOLEAN DEFAULT True,
    verified BOOLEAN DEFAULT False,
    created_at TIMESTAMP,
    updated_at TIMESTAMP,
    last_used_at TIMESTAMP
);

-- Table: quizzes
CREATE TABLE quizzes (
    id VARCHAR(50) PRIMARY KEY,
    module_id VARCHAR(50),
    title VARCHAR(200) NOT NULL,
    description TEXT,
    time_limit INTEGER,
    passing_score INTEGER DEFAULT 70,
    topics JSONB DEFAULT [],
    status VARCHAR(20) DEFAULT active,
    valid_from TIMESTAMP,
    valid_until TIMESTAMP,
    created_at TIMESTAMP
);

-- Table: message_read_status
CREATE TABLE message_read_status (
    id VARCHAR(50) PRIMARY KEY,
    message_id VARCHAR(50) NOT NULL,
    user_id VARCHAR(50) NOT NULL,
    read_at TIMESTAMP
);

-- Table: questions
CREATE TABLE questions (
    id VARCHAR(50) PRIMARY KEY,
    quiz_id VARCHAR(50) NOT NULL,
    question TEXT NOT NULL,
    type VARCHAR(50) NOT NULL,
    options JSONB DEFAULT [],
    correct_answer TEXT,
    explanation TEXT,
    points INTEGER DEFAULT 1,
    order INTEGER DEFAULT 0
);

-- Table: quiz_results
CREATE TABLE quiz_results (
    id VARCHAR(50) PRIMARY KEY,
    quiz_id VARCHAR(50) NOT NULL,
    student_id VARCHAR(50) NOT NULL,
    course_id VARCHAR(50),
    module_id VARCHAR(50),
    score INTEGER NOT NULL,
    total_questions INTEGER NOT NULL,
    correct_answers INTEGER NOT NULL,
    time_spent INTEGER,
    answers JSONB DEFAULT [],
    completed_at TIMESTAMP,
    status VARCHAR(20) DEFAULT completed
);

-- Table: sessions
CREATE TABLE sessions (
    id VARCHAR(50) PRIMARY KEY,
    course_id VARCHAR(50),
    module_id VARCHAR(50),
    lesson_id VARCHAR(50),
    tutor_id VARCHAR(50) NOT NULL,
    availability_id VARCHAR(50),
    title VARCHAR(200) NOT NULL,
    description TEXT,
    scheduled_date TIMESTAMP NOT NULL,
    timezone VARCHAR(50) DEFAULT UTC,
    duration INTEGER DEFAULT 60,
    status VARCHAR(20) DEFAULT scheduled,
    meeting_link VARCHAR(500),
    meeting_id VARCHAR(100),
    meeting_password VARCHAR(50),
    meeting_start_url VARCHAR(500),
    meeting_uuid VARCHAR(100),
    topic VARCHAR(200),
    max_students INTEGER DEFAULT 5,
    price FLOAT DEFAULT 0.0,
    currency VARCHAR(3) DEFAULT GBP,
    created_at TIMESTAMP,
    transcript_text TEXT,
    ai_tutor_feedback TEXT,
    session_rating FLOAT,
    participants_summary TEXT,
    transcript_language VARCHAR(10) DEFAULT en,
    feedback_generated_at TIMESTAMP,
    zoom_meeting_duration INTEGER,
    zoom_participants_count INTEGER
);

-- Table: credit_transactions
CREATE TABLE credit_transactions (
    id VARCHAR(50) PRIMARY KEY,
    guardian_id VARCHAR(50) NOT NULL,
    student_id VARCHAR(50),
    allocation_id VARCHAR(50),
    transaction_type VARCHAR(50) NOT NULL,
    credits FLOAT NOT NULL,
    description VARCHAR(500),
    related_session_id VARCHAR(50),
    related_enrollment_id VARCHAR(50),
    created_at TIMESTAMP
);

-- Table: session_students
CREATE TABLE session_students (
    session_id VARCHAR(50) PRIMARY KEY,
    student_id VARCHAR(50) PRIMARY KEY
);

-- Table: student_session_feedback
CREATE TABLE student_session_feedback (
    id VARCHAR(50) PRIMARY KEY,
    session_id VARCHAR(50) NOT NULL,
    student_id VARCHAR(50) NOT NULL,
    guardian_id VARCHAR(50) NOT NULL,
    ai_guardian_feedback TEXT NOT NULL,
    student_performance_summary TEXT,
    areas_of_improvement TEXT,
    strengths_highlighted TEXT,
    created_at TIMESTAMP
);

-- Table: tutor_earnings
CREATE TABLE tutor_earnings (
    id VARCHAR(50) PRIMARY KEY,
    tutor_id VARCHAR(50) NOT NULL,
    session_id VARCHAR(50),
    amount FLOAT NOT NULL,
    currency VARCHAR(3) DEFAULT GBP,
    status VARCHAR(20) DEFAULT pending,
    earned_date TIMESTAMP,
    payout_date TIMESTAMP,
    commission FLOAT DEFAULT 0.15
);

-- Foreign Key Constraints
ALTER TABLE invoices ADD CONSTRAINT fk_invoices_id FOREIGN KEY (payment_id) REFERENCES payments (id);
ALTER TABLE invoices ADD CONSTRAINT fk_invoices_id FOREIGN KEY (student_id) REFERENCES users (id);
ALTER TABLE invoices ADD CONSTRAINT fk_invoices_id FOREIGN KEY (course_id) REFERENCES courses (id);
ALTER TABLE invoices ADD CONSTRAINT fk_invoices_id FOREIGN KEY (guardian_id) REFERENCES users (id);
ALTER TABLE payments ADD CONSTRAINT fk_payments_id FOREIGN KEY (guardian_id) REFERENCES users (id);
ALTER TABLE payments ADD CONSTRAINT fk_payments_id FOREIGN KEY (invoice_id) REFERENCES invoices (id);
ALTER TABLE users ADD CONSTRAINT fk_users_id FOREIGN KEY (temp_password_created_by) REFERENCES users (id);
ALTER TABLE admin_actions ADD CONSTRAINT fk_admin_actions_id FOREIGN KEY (target_user_id) REFERENCES users (id);
ALTER TABLE admin_actions ADD CONSTRAINT fk_admin_actions_id FOREIGN KEY (admin_id) REFERENCES users (id);
ALTER TABLE admin_secure_sessions ADD CONSTRAINT fk_admin_secure_sessions_id FOREIGN KEY (admin_id) REFERENCES users (id);
ALTER TABLE admin_security_config ADD CONSTRAINT fk_admin_security_config_id FOREIGN KEY (updated_by) REFERENCES users (id);
ALTER TABLE admin_security_config ADD CONSTRAINT fk_admin_security_config_id FOREIGN KEY (created_by) REFERENCES users (id);
ALTER TABLE ai_prompts ADD CONSTRAINT fk_ai_prompts_id FOREIGN KEY (created_by) REFERENCES users (id);
ALTER TABLE ai_prompts ADD CONSTRAINT fk_ai_prompts_id FOREIGN KEY (updated_by) REFERENCES users (id);
ALTER TABLE availability ADD CONSTRAINT fk_availability_id FOREIGN KEY (tutor_id) REFERENCES users (id);
ALTER TABLE availability ADD CONSTRAINT fk_availability_id FOREIGN KEY (parent_availability_id) REFERENCES availability (id);
ALTER TABLE availability ADD CONSTRAINT fk_availability_id FOREIGN KEY (course_id) REFERENCES courses (id);
ALTER TABLE course_chats ADD CONSTRAINT fk_course_chats_id FOREIGN KEY (created_by) REFERENCES users (id);
ALTER TABLE course_chats ADD CONSTRAINT fk_course_chats_id FOREIGN KEY (course_id) REFERENCES courses (id);
ALTER TABLE course_tutors ADD CONSTRAINT fk_course_tutors_id FOREIGN KEY (tutor_id) REFERENCES users (id);
ALTER TABLE course_tutors ADD CONSTRAINT fk_course_tutors_id FOREIGN KEY (course_id) REFERENCES courses (id);
ALTER TABLE credit_balances ADD CONSTRAINT fk_credit_balances_id FOREIGN KEY (guardian_id) REFERENCES users (id);
ALTER TABLE enrollments ADD CONSTRAINT fk_enrollments_id FOREIGN KEY (course_id) REFERENCES courses (id);
ALTER TABLE enrollments ADD CONSTRAINT fk_enrollments_id FOREIGN KEY (student_id) REFERENCES users (id);
ALTER TABLE enrollments ADD CONSTRAINT fk_enrollments_id FOREIGN KEY (guardian_id) REFERENCES users (id);
ALTER TABLE guardian_invitations ADD CONSTRAINT fk_guardian_invitations_id FOREIGN KEY (guardian_id) REFERENCES users (id);
ALTER TABLE guardian_invitations ADD CONSTRAINT fk_guardian_invitations_id FOREIGN KEY (student_id) REFERENCES users (id);
ALTER TABLE modules ADD CONSTRAINT fk_modules_id FOREIGN KEY (course_id) REFERENCES courses (id);
ALTER TABLE notifications ADD CONSTRAINT fk_notifications_id FOREIGN KEY (user_id) REFERENCES users (id);
ALTER TABLE password_reset_tokens ADD CONSTRAINT fk_password_reset_tokens_id FOREIGN KEY (user_id) REFERENCES users (id);
ALTER TABLE password_reset_tokens ADD CONSTRAINT fk_password_reset_tokens_id FOREIGN KEY (initiated_by_admin) REFERENCES users (id);
ALTER TABLE password_view_audit ADD CONSTRAINT fk_password_view_audit_id FOREIGN KEY (admin_id) REFERENCES users (id);
ALTER TABLE password_view_audit ADD CONSTRAINT fk_password_view_audit_id FOREIGN KEY (target_user_id) REFERENCES users (id);
ALTER TABLE stripe_customers ADD CONSTRAINT fk_stripe_customers_id FOREIGN KEY (user_id) REFERENCES users (id);
ALTER TABLE student_credit_allocations ADD CONSTRAINT fk_student_credit_allocations_id FOREIGN KEY (student_id) REFERENCES users (id);
ALTER TABLE student_credit_allocations ADD CONSTRAINT fk_student_credit_allocations_id FOREIGN KEY (guardian_id) REFERENCES users (id);
ALTER TABLE system_config ADD CONSTRAINT fk_system_config_id FOREIGN KEY (updated_by) REFERENCES users (id);
ALTER TABLE system_settings ADD CONSTRAINT fk_system_settings_id FOREIGN KEY (updated_by) REFERENCES users (id);
ALTER TABLE user_password_vault ADD CONSTRAINT fk_user_password_vault_id FOREIGN KEY (user_id) REFERENCES users (id);
ALTER TABLE chat_messages ADD CONSTRAINT fk_chat_messages_id FOREIGN KEY (reply_to_message_id) REFERENCES chat_messages (id);
ALTER TABLE chat_messages ADD CONSTRAINT fk_chat_messages_id FOREIGN KEY (sender_id) REFERENCES users (id);
ALTER TABLE chat_messages ADD CONSTRAINT fk_chat_messages_id FOREIGN KEY (chat_id) REFERENCES course_chats (id);
ALTER TABLE chat_participants ADD CONSTRAINT fk_chat_participants_id FOREIGN KEY (user_id) REFERENCES users (id);
ALTER TABLE chat_participants ADD CONSTRAINT fk_chat_participants_id FOREIGN KEY (chat_id) REFERENCES course_chats (id);
ALTER TABLE lessons ADD CONSTRAINT fk_lessons_id FOREIGN KEY (module_id) REFERENCES modules (id);
ALTER TABLE payment_methods ADD CONSTRAINT fk_payment_methods_id FOREIGN KEY (user_id) REFERENCES users (id);
ALTER TABLE payment_methods ADD CONSTRAINT fk_payment_methods_id FOREIGN KEY (stripe_customer_id) REFERENCES stripe_customers (id);
ALTER TABLE quizzes ADD CONSTRAINT fk_quizzes_id FOREIGN KEY (module_id) REFERENCES modules (id);
ALTER TABLE message_read_status ADD CONSTRAINT fk_message_read_status_id FOREIGN KEY (user_id) REFERENCES users (id);
ALTER TABLE message_read_status ADD CONSTRAINT fk_message_read_status_id FOREIGN KEY (message_id) REFERENCES chat_messages (id);
ALTER TABLE questions ADD CONSTRAINT fk_questions_id FOREIGN KEY (quiz_id) REFERENCES quizzes (id);
ALTER TABLE quiz_results ADD CONSTRAINT fk_quiz_results_id FOREIGN KEY (quiz_id) REFERENCES quizzes (id);
ALTER TABLE quiz_results ADD CONSTRAINT fk_quiz_results_id FOREIGN KEY (course_id) REFERENCES courses (id);
ALTER TABLE quiz_results ADD CONSTRAINT fk_quiz_results_id FOREIGN KEY (module_id) REFERENCES modules (id);
ALTER TABLE quiz_results ADD CONSTRAINT fk_quiz_results_id FOREIGN KEY (student_id) REFERENCES users (id);
ALTER TABLE sessions ADD CONSTRAINT fk_sessions_id FOREIGN KEY (module_id) REFERENCES modules (id);
ALTER TABLE sessions ADD CONSTRAINT fk_sessions_id FOREIGN KEY (availability_id) REFERENCES availability (id);
ALTER TABLE sessions ADD CONSTRAINT fk_sessions_id FOREIGN KEY (tutor_id) REFERENCES users (id);
ALTER TABLE sessions ADD CONSTRAINT fk_sessions_id FOREIGN KEY (lesson_id) REFERENCES lessons (id);
ALTER TABLE sessions ADD CONSTRAINT fk_sessions_id FOREIGN KEY (course_id) REFERENCES courses (id);
ALTER TABLE credit_transactions ADD CONSTRAINT fk_credit_transactions_id FOREIGN KEY (related_enrollment_id) REFERENCES enrollments (id);
ALTER TABLE credit_transactions ADD CONSTRAINT fk_credit_transactions_id FOREIGN KEY (related_session_id) REFERENCES sessions (id);
ALTER TABLE credit_transactions ADD CONSTRAINT fk_credit_transactions_id FOREIGN KEY (allocation_id) REFERENCES student_credit_allocations (id);
ALTER TABLE credit_transactions ADD CONSTRAINT fk_credit_transactions_id FOREIGN KEY (student_id) REFERENCES users (id);
ALTER TABLE credit_transactions ADD CONSTRAINT fk_credit_transactions_id FOREIGN KEY (guardian_id) REFERENCES users (id);
ALTER TABLE session_students ADD CONSTRAINT fk_session_students_id FOREIGN KEY (session_id) REFERENCES sessions (id);
ALTER TABLE session_students ADD CONSTRAINT fk_session_students_id FOREIGN KEY (student_id) REFERENCES users (id);
ALTER TABLE student_session_feedback ADD CONSTRAINT fk_student_session_feedback_id FOREIGN KEY (student_id) REFERENCES users (id);
ALTER TABLE student_session_feedback ADD CONSTRAINT fk_student_session_feedback_id FOREIGN KEY (guardian_id) REFERENCES users (id);
ALTER TABLE student_session_feedback ADD CONSTRAINT fk_student_session_feedback_id FOREIGN KEY (session_id) REFERENCES sessions (id);
ALTER TABLE tutor_earnings ADD CONSTRAINT fk_tutor_earnings_id FOREIGN KEY (tutor_id) REFERENCES users (id);
ALTER TABLE tutor_earnings ADD CONSTRAINT fk_tutor_earnings_id FOREIGN KEY (session_id) REFERENCES sessions (id);

-- Indexes
CREATE INDEX IF NOT EXISTS ix_guardian_invitations_guardian_email ON guardian_invitations (guardian_email);
CREATE INDEX IF NOT EXISTS idx_session_feedback ON student_session_feedback (session_id);
CREATE INDEX IF NOT EXISTS idx_student_feedback ON student_session_feedback (student_id, created_at);
CREATE INDEX IF NOT EXISTS idx_guardian_feedback ON student_session_feedback (guardian_id, created_at);