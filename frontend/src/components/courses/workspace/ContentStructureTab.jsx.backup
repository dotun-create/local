import React, { useState, useCallback, useMemo, useEffect } from 'react';
import ContentTree from './components/ContentTree';
import QuickCreatePanel from './components/QuickCreatePanel';
import BatchOperationsPanel from './components/BatchOperationsPanel';
import ContentTemplateSelector from './components/ContentTemplateSelector';
import AddModuleModal from './components/AddModuleModal';

const ContentStructureTab = ({ 
  courseId, 
  workspaceState, 
  onSelectionChange, 
  onCreateContent, 
  onBatchOperation, 
  onRefresh,
  creationContext
}) => {
  const [viewMode, setViewMode] = useState('tree'); // 'tree', 'list', 'grid'
  const [searchQuery, setSearchQuery] = useState('');
  const [filters, setFilters] = useState({
    type: 'all', // 'all', 'modules', 'lessons', 'quizzes'
    status: 'all', // 'all', 'draft', 'published', 'archived'
    sortBy: 'order' // 'order', 'title', 'created', 'updated'
  });
  const [expandedKeys, setExpandedKeys] = useState(['modules']);
  const [showCreatePanel, setShowCreatePanel] = useState(false);
  const [createContext, setCreateContext] = useState(null);
  const [showTemplateSelector, setShowTemplateSelector] = useState(false);
  const [showAddModuleModal, setShowAddModuleModal] = useState(false);

  // Build hierarchical tree data
  const treeData = useMemo(() => {
    const { course, modules, lessons, quizzes } = workspaceState;
    if (!course) return [];

    // Group lessons by module
    const lessonsByModule = lessons.reduce((acc, lesson) => {
      const moduleId = lesson.moduleId || lesson.module_id || lesson.parentId || lesson.parent_id;
      
      if (moduleId && !acc[moduleId]) acc[moduleId] = [];
      if (moduleId) acc[moduleId].push(lesson);
      return acc;
    }, {});

    // Group quizzes by module
    const quizzesByModule = quizzes.reduce((acc, quiz) => {
      const moduleId = quiz.moduleId || quiz.module_id || quiz.parentId || quiz.parent_id;
      
      if (moduleId && !acc[moduleId]) acc[moduleId] = [];
      if (moduleId) acc[moduleId].push(quiz);
      return acc;
    }, {});

    // Build tree structure
    const tree = [
      {
        key: 'course',
        title: course.title,
        type: 'course',
        data: course,
        icon: '📖',
        children: modules.map(module => {
          // Build simplified module title: "Module Name | Start Date - End Date"
          let moduleTitle = module.title;

          const formatDate = (dateStr) => {
            if (!dateStr) return null;
            try {
              const date = new Date(dateStr);
              return date.toLocaleDateString('en-US', {
                month: 'short',
                day: 'numeric',
                year: date.getFullYear() !== new Date().getFullYear() ? 'numeric' : undefined
              });
            } catch {
              return dateStr;
            }
          };

          // Only show start and end dates in simple format
          if (module.startDate && module.endDate) {
            const start = formatDate(module.startDate);
            const end = formatDate(module.endDate);
            if (start && end) {
              moduleTitle += ` | ${start} - ${end}`;
            }
          }
          
          return {
            key: `module-${module.id}`,
            title: moduleTitle,
            type: 'module',
            data: module,
            icon: '📚',
            children: [
              // Lessons
              ...(lessonsByModule[module.id] || []).map(lesson => ({
                key: `lesson-${lesson.id}`,
                title: lesson.title,
                type: 'lesson',
                data: lesson,
                icon: '📝',
                children: []
              })),
              // Quizzes
              ...(quizzesByModule[module.id] || []).map(quiz => ({
                key: `quiz-${quiz.id}`,
                title: quiz.title,
                type: 'quiz',
                data: quiz,
                icon: '📋',
                children: []
              }))
            ]
          };
        })
      }
    ];

    return tree;
  }, [workspaceState]);

  // Filter and search tree data
  const filteredTreeData = useMemo(() => {
    if (!searchQuery && filters.type === 'all' && filters.status === 'all') {
      return treeData;
    }

    const filterNode = (node) => {
      // Search filter
      const matchesSearch = !searchQuery || 
        node.title.toLowerCase().includes(searchQuery.toLowerCase());

      // Type filter
      const matchesType = filters.type === 'all' || 
        node.type === filters.type || 
        (filters.type === 'modules' && node.type === 'module') ||
        (filters.type === 'lessons' && node.type === 'lesson') ||
        (filters.type === 'quizzes' && node.type === 'quiz');

      // Status filter (implement based on your data structure)
      const matchesStatus = filters.status === 'all' || 
        (node.data && node.data.status === filters.status);

      // Filter children recursively
      const filteredChildren = node.children
        .map(child => filterNode(child))
        .filter(child => child !== null);

      // Include node if it matches criteria or has matching children
      if ((matchesSearch && matchesType && matchesStatus) || filteredChildren.length > 0) {
        return {
          ...node,
          children: filteredChildren
        };
      }

      return null;
    };

    return treeData.map(node => filterNode(node)).filter(node => node !== null);
  }, [treeData, searchQuery, filters]);

  // Handle tree node selection
  const handleTreeSelection = useCallback((selectedKeys, info) => {
    const selectedItems = selectedKeys.map(key => {
      const parts = key.split('-');
      const type = parts[0];
      const id = parts[1];
      
      // Find the actual data
      let data = null;
      switch (type) {
        case 'course':
          data = workspaceState.course;
          break;
        case 'module':
          data = workspaceState.modules.find(m => m.id === id);
          break;
        case 'lesson':
          data = workspaceState.lessons.find(l => l.id === id);
          break;
        case 'quiz':
          data = workspaceState.quizzes.find(q => q.id === id);
          break;
      }

      return {
        key,
        type: type === 'course' ? 'course' : type,
        id,
        data,
        title: data?.title || data?.name || 'Unknown'
      };
    }).filter(item => item.data);

    onSelectionChange(selectedItems);
  }, [workspaceState, onSelectionChange]);

  // Handle inline creation
  const handleInlineCreate = useCallback((parentNode, contentType) => {
    // Use new modal for module creation, keep panel for other content types
    if (contentType === 'module') {
      setShowAddModuleModal(true);
    } else {
      setCreateContext({
        parentNode,
        contentType,
        parentId: parentNode.type === 'course' ? courseId : parentNode.data.id
      });
      setShowCreatePanel(true);
    }
  }, [courseId]);

  // Handle module creation from the new modal
  const handleModuleSubmit = useCallback(async (moduleData) => {
    try {
      await onCreateContent('module', moduleData);
      setShowAddModuleModal(false);
      onRefresh(); // Refresh the workspace data
    } catch (error) {
      console.error('Error creating module:', error);
      throw error; // Re-throw to let modal handle error display
    }
  }, [onCreateContent, onRefresh]);

  // Handle modal close
  const handleModuleCancel = useCallback(() => {
    setShowAddModuleModal(false);
  }, []);

  // Handle template-based creation
  const handleTemplateCreate = () => {
    setShowTemplateSelector(true);
  };

  // Handle external creation context (from session to quiz modal switch)
  useEffect(() => {
    if (creationContext && creationContext.autoOpen) {
      setCreateContext(creationContext);
      setShowCreatePanel(true);
      console.log('Auto-opening quiz creation panel with context:', creationContext);
    }
  }, [creationContext]);

  // Handle content creation
  const handleCreateSubmit = useCallback(async (contentType, formData) => {
    try {
      await onCreateContent(contentType, formData, createContext?.parentId);
      setShowCreatePanel(false);
      setCreateContext(null);
    } catch (error) {
      console.error('Failed to create content:', error);
      // Handle error (show notification, etc.)
    }
  }, [onCreateContent, createContext]);

  return (
    <div className="content-structure-tab">
      {/* Toolbar */}
      <div className="content-toolbar">
        <div className="toolbar-left">
          <div className="view-controls">
            <button 
              className={`view-toggle ${viewMode === 'tree' ? 'active' : ''}`}
              onClick={() => setViewMode('tree')}
              title="Tree View"
            >
              🌲
            </button>
            <button 
              className={`view-toggle ${viewMode === 'list' ? 'active' : ''}`}
              onClick={() => setViewMode('list')}
              title="List View"
            >
              📋
            </button>
            <button 
              className={`view-toggle ${viewMode === 'grid' ? 'active' : ''}`}
              onClick={() => setViewMode('grid')}
              title="Grid View"
            >
              ⊞
            </button>
          </div>

          <div className="search-controls">
            <div className="search-input">
              <span className="search-icon">🔍</span>
              <input
                type="text"
                placeholder="Search content..."
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
              />
            </div>
          </div>
        </div>

        <div className="toolbar-right">
          <div className="filter-controls">
            <select 
              value={filters.type}
              onChange={(e) => setFilters({...filters, type: e.target.value})}
              className="filter-select"
            >
              <option value="all">All Types</option>
              <option value="modules">Modules</option>
              <option value="lessons">Lessons</option>
              <option value="quizzes">Quizzes</option>
            </select>

            <select 
              value={filters.sortBy}
              onChange={(e) => setFilters({...filters, sortBy: e.target.value})}
              className="filter-select"
            >
              <option value="order">Order</option>
              <option value="title">Title</option>
              <option value="created">Created</option>
              <option value="updated">Updated</option>
            </select>
          </div>

          <div className="action-controls">
            <button 
              className="btn btn-outline"
              onClick={handleTemplateCreate}
            >
              📋 Templates
            </button>
            <button 
              className="btn btn-primary"
              onClick={() => handleInlineCreate(
                { type: 'course', data: workspaceState.course }, 
                'module'
              )}
            >
              + Add Module
            </button>
          </div>
        </div>
      </div>

      {/* Main Content Area */}
      <div className="content-main">
        {/* Tree/Content View */}
        <div className="content-view">
          {viewMode === 'tree' && (
            <ContentTree
              data={filteredTreeData}
              selectedItems={workspaceState.selectedItems}
              expandedKeys={expandedKeys}
              onExpand={setExpandedKeys}
              onSelectionChange={handleTreeSelection}
              onInlineCreate={handleInlineCreate}
            />
          )}
          
          {/* TODO: Implement list and grid views */}
          {viewMode === 'list' && (
            <div className="list-view">
              <p>List view coming soon...</p>
            </div>
          )}
          
          {viewMode === 'grid' && (
            <div className="grid-view">
              <p>Grid view coming soon...</p>
            </div>
          )}

          {/* Empty State */}
          {filteredTreeData.length === 0 && (
            <div className="empty-state">
              <div className="empty-state-content">
                <span className="empty-icon">📚</span>
                <h3>No content found</h3>
                <p>Start building your course by adding modules, lessons, and quizzes.</p>
                <button 
                  className="btn btn-primary"
                  onClick={() => handleInlineCreate(
                    { type: 'course', data: workspaceState.course }, 
                    'module'
                  )}
                >
                  Create First Module
                </button>
              </div>
            </div>
          )}
        </div>

        {/* Side Panel */}
        {(showCreatePanel || workspaceState.selectedItems.length > 0) && (
          <div className="content-sidebar">
            {/* Batch Operations */}
            {workspaceState.selectedItems.length > 0 && (
              <BatchOperationsPanel
                selectedItems={workspaceState.selectedItems}
                onBatchOperation={onBatchOperation}
              />
            )}

            {/* Quick Create */}
            {showCreatePanel && createContext && (
              <QuickCreatePanel
                context={createContext}
                onSubmit={handleCreateSubmit}
                onCancel={() => {
                  setShowCreatePanel(false);
                  setCreateContext(null);
                }}
              />
            )}
          </div>
        )}
      </div>

      {/* Template Selector Modal */}
      {showTemplateSelector && (
        <ContentTemplateSelector
          courseId={courseId}
          onSelect={(template) => {
            // Handle template selection
            console.log('Selected template:', template);
            setShowTemplateSelector(false);
          }}
          onCancel={() => setShowTemplateSelector(false)}
        />
      )}

      {/* Add Module Modal - NEW: Centered modal instead of right-side panel */}
      <AddModuleModal
        isOpen={showAddModuleModal}
        courseId={courseId}
        courseTimezone={workspaceState.course?.timezone}
        onSubmit={handleModuleSubmit}
        onCancel={handleModuleCancel}
      />
    </div>
  );
};

export default ContentStructureTab;